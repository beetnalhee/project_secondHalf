<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ezen.springmvc.domain.dailyarticle.mapper.DailyArticleMapper">
    <!-- 신규 일상 게시글 생성 -->
    <insert id="createDailyArticle" parameterType="DailyArticleDto">
        <selectKey keyProperty="dailyArticleId" resultType="int" order="BEFORE">
            SELECT D_ARTICLE_ID_SEQ.nextval FROM dual
        </selectKey>

        INSERT INTO daily_article(d_article_id, title, content, category_id, member_id)
        VALUES (#{dailyArticleId}, #{title}, #{content}, #{categoryId}, #{memberId})
    </insert>

    <!-- 일상 게시글 번호로 게시글 조회 -->
    <select id="findByDailyArticleId" parameterType="int" resultType="DailyArticleDto">
        SELECT d_article_id "dailyArticleId", title, regdate, hitcount, category_id, member_id
        FROM daily_article
        WHERE d_article_id = #{dailyArticleId}
    </select>

    <!-- 검색 조건에 따른 일상 게시글 목록 조회 -->
    <select id="findByAllDailyArticle" resultType="DailyArticleDto">
        SELECT dailyArticleId, title, member_id, file_name, encrypted_name, totalHeartCount
        FROM (SELECT dailyArticleId,
        title,
        member_id,
        file_name,
        encrypted_name,
        totalHeartCount,
        CEIL(ROWNUM / #{searchDto.limit}) page
        FROM (SELECT d.d_article_id dailyArticleId,
        d.title,
        d.member_id,
        f.file_name,
        f.encrypted_name,
        COALESCE(SUM(h.heart_count), 0) totalHeartCount
        FROM daily_article d
        JOIN (SELECT a.d_article_id, a.file_name, a.encrypted_name
        FROM (SELECT d.d_article_id,
        f.file_name,
        f.encrypted_name,
        ROW_NUMBER() OVER (PARTITION BY d.d_article_id ORDER BY f.file_id) AS rn
        FROM daily_article d
        JOIN attach_file f ON d.d_article_id = f.d_article_id
        WHERE d.category_id = #{categoryId}) a
        WHERE a.rn = 1) f ON d.d_article_id = f.d_article_id
        LEFT JOIN heart h ON d.d_article_id = h.d_article_id
        GROUP BY d.d_article_id, d.title, d.member_id, f.file_name, f.encrypted_name
        ORDER BY d.d_article_id DESC))
        WHERE page = #{searchDto.page}
    </select>

    <!-- 태그 이름 및 검색 조건에 따른 일상 게시글 목록 조회 -->
    <select id="findByAllTagName" resultType="DailyArticleDto">
        SELECT DISTINCT dailyArticleId, title, member_id, file_name, encrypted_name, totalHeartCount
        FROM (SELECT dailyArticleId,
        title,
        member_id,
        file_name,
        encrypted_name,
        totalHeartCount,
        CEIL(ROWNUM / #{searchDto.limit}) page
        FROM (SELECT d.d_article_id dailyArticleId,
        d.title,
        d.member_id,
        f.file_name,
        f.encrypted_name,
        COALESCE(SUM(h.heart_count), 0) totalHeartCount
        FROM daily_article d
        JOIN (SELECT d_article_id,
        file_name,
        encrypted_name,
        ROW_NUMBER() OVER (PARTITION BY d_article_id ORDER BY file_id) rn
        FROM attach_file) f ON d.d_article_id = f.d_article_id AND f.rn = 1
        LEFT JOIN heart h ON d.d_article_id = h.d_article_id
        JOIN tag_article ta ON d.d_article_id = ta.d_article_id
        JOIN tag t ON ta.tag_id = t.tag_id
        WHERE d.category_id = #{categoryId}
        AND t.tag_name = #{tagName}
        GROUP BY d.d_article_id, d.title, d.member_id, f.file_name, f.encrypted_name
        ORDER BY d.d_article_id DESC))
        WHERE page = #{searchDto.page}
        ORDER BY dailyArticleId DESC
    </select>

    <!-- 일상 게시글 상세 조회 -->
    <select id="readDailyArticle" parameterType="int" resultType="DailyArticleDto">
        SELECT d.title,
        d.content,
        d.member_id,
        d.hitcount,
        TO_CHAR(d.regdate, 'YYYY-MM-DD HH24:MI') AS regdate,
        NVL(SUM(h.heart_count), 0) AS totalHeartCount,
        LISTAGG(t.tag_name, ', ') WITHIN GROUP (ORDER BY t.tag_name) AS tag_names
        FROM daily_article d
        LEFT JOIN heart h ON d.d_article_id = h.d_article_id
        LEFT JOIN tag_article ta ON d.d_article_id = ta.d_article_id
        LEFT JOIN tag t ON ta.tag_id = t.tag_id
        WHERE d.category_id = #{categoryId}
        AND d.d_article_id = #{dailyArticleId}
        GROUP BY d.title,
        d.content,
        d.member_id,
        d.hitcount,
        d.regdate
    </select>

    <!-- 검색 조건에 따른 일상 게시글 개수 조회 -->
    <select id="findDailyArticleCount" resultType="int">
        SELECT
        COUNT(d.d_article_id) "cnt"
        FROM
        daily_article d
        LEFT JOIN tag_article ta ON d.d_article_id = ta.d_article_id
        LEFT JOIN tag t ON ta.tag_id = t.tag_id
        <where>
            d.category_id = #{categoryId}
            <if test="searchDto.tagName != null and !searchDto.tagName.isEmpty()">AND t.tag_name =
                #{searchDto.tagName}
            </if>
        </where>
    </select>

    <!-- 일상 게시글 조회수 업데이트 -->
    <update id="updateDailyArticleHitCount">
        UPDATE daily_article
        SET hitcount = hitcount + 1
        WHERE category_id = #{categoryId}
        AND d_article_id = #{dailyArticleId}
    </update>

    <!-- 일상 게시글 업데이트 -->
    <update id="updateDailyArticle">
        UPDATE daily_article
        <set>
            <if test="editedDailyArticleDto.title != null and !editedDailyArticleDto.title.isEmpty()">
                title = #{editedDailyArticleDto.title},
            </if>
            <if test="editedDailyArticleDto.content != null and !editedDailyArticleDto.content.isEmpty()">
                content = #{editedDailyArticleDto.content}
            </if>
        </set>
        WHERE d_article_id = #{dailyArticleId}
    </update>

    <!-- 일상 게시글 행 삭제 -->
    <delete id="deleteDailyArticle">
        DELETE
        FROM daily_article
        WHERE category_id = #{categoryId}
        AND d_article_id = #{dailyArticleId}
    </delete>
</mapper>

